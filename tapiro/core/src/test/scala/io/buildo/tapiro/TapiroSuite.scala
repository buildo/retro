package io.buildo.tapiro

import java.nio.file.Files

class TapiroSuite extends munit.FunSuite {

  check(
    "tapir-http4s-endpoints",
    Server.Http4s,
    "src/main/scala/schools/endpoints",
    """
      |/src/main/scala/schools/SchoolController.scala
      |package schools
      |
      |case class School(id: Long, name: String)
      |
      |sealed trait SchoolCreateError
      |object SchoolCreateError {
      |  case object DuplicateId extends SchoolCreateError
      |}
      |
      |sealed trait SchoolReadError
      |object SchoolReadError {
      |  case object NotFound extends SchoolReadError
      |}
      |
      |trait SchoolController[F[_], Auth] {
      |  @command
      |  def create(school: School, token: Auth): F[Either[SchoolCreateError, Unit]]
      |  @query
      |  def read(id: Long): F[Either[SchoolReadError, School]]
      |  @query
      |  def list(excludedSchools: List[School]): F[Either[Unit, List[School]]]
      |}
      |""".stripMargin,
    """
      |/src/main/scala/schools/endpoints/SchoolControllerTapirEndpoints.scala
      |//----------------------------------------------------------
      |//  This code was generated by tapiro.
      |//  Changes to this file may cause incorrect behavior
      |//  and will be lost if the code is regenerated.
      |//----------------------------------------------------------
      |
      |package endpoints
      |import schools._
      |import io.circe.{Decoder, Encoder}
      |import io.circe.generic.semiauto.{deriveDecoder, deriveEncoder}
      |import sttp.tapir._
      |import sttp.tapir.json.circe._
      |import sttp.tapir.Codec.{JsonCodec, PlainCodec}
      |import sttp.model.StatusCode
      |
      |trait SchoolControllerTapirEndpoints[Auth] {
      |
      |  val create: Endpoint[
      |    (SchoolControllerTapirEndpoints.CreateRequestPayload, Auth),
      |    SchoolCreateError,
      |    Unit,
      |    Nothing
      |  ]
      |  val read: Endpoint[Long, SchoolReadError, School, Nothing]
      |  val list: Endpoint[List[School], Unit, List[School], Nothing]
      |}
      |
      |object SchoolControllerTapirEndpoints {
      |
      |  def create[Auth](statusCodes: String => StatusCode)(
      |      implicit codec0: Decoder[School],
      |      codec1: Encoder[School],
      |      codec2: JsonCodec[SchoolCreateError.DuplicateId.type],
      |      codec3: PlainCodec[Auth],
      |      codec4: PlainCodec[Long],
      |      codec5: JsonCodec[School],
      |      codec6: JsonCodec[SchoolReadError.NotFound.type],
      |      codec7: PlainCodec[School]
      |  ) = new SchoolControllerTapirEndpoints[Auth] {
      |    implicit val createRequestPayloadDecoder: Decoder[CreateRequestPayload] =
      |      deriveDecoder
      |    implicit val createRequestPayloadEncoder: Encoder[CreateRequestPayload] =
      |      deriveEncoder
      |    override lazy val create: Endpoint[
      |      (SchoolControllerTapirEndpoints.CreateRequestPayload, Auth),
      |      SchoolCreateError,
      |      Unit,
      |      Nothing
      |    ] = endpoint.post
      |      .in("create")
      |      .in(jsonBody[CreateRequestPayload])
      |      .in(header[Auth]("Authorization"))
      |      .errorOut(
      |        oneOf[SchoolCreateError](
      |          statusMapping(
      |            statusCodes("DuplicateId"),
      |            jsonBody[SchoolCreateError.DuplicateId.type]
      |          )
      |        )
      |      )
      |    override lazy val read: Endpoint[Long, SchoolReadError, School, Nothing] =
      |      endpoint.get
      |        .in("read")
      |        .in(query[Long]("id"))
      |        .errorOut(
      |          oneOf[SchoolReadError](
      |            statusMapping(
      |              statusCodes("NotFound"),
      |              jsonBody[SchoolReadError.NotFound.type]
      |            )
      |          )
      |        )
      |        .out(jsonBody[School])
      |    override lazy val list
      |        : Endpoint[List[School], Unit, List[School], Nothing] = endpoint.get
      |      .in("list")
      |      .in(query[List[School]]("excludedSchools[]"))
      |      .out(jsonBody[List[School]])
      |  }
      |  case class CreateRequestPayload(school: School)
      |}
      |
      |/src/main/scala/schools/endpoints/SchoolControllerHttpEndpoints.scala
      |//----------------------------------------------------------
      |//  This code was generated by tapiro.
      |//  Changes to this file may cause incorrect behavior
      |//  and will be lost if the code is regenerated.
      |//----------------------------------------------------------
      |
      |package endpoints
      |import schools._
      |import cats.effect._
      |import cats.implicits._
      |import cats.data.NonEmptyList
      |import io.circe.{Decoder, Encoder}
      |import org.http4s._
      |import org.http4s.server.Router
      |import sttp.tapir.server.http4s._
      |import sttp.tapir.Codec.{JsonCodec, PlainCodec}
      |import sttp.model.StatusCode
      |
      |object SchoolControllerHttpEndpoints {
      |
      |  def routes[F[_]: Sync, Auth](
      |      controller: SchoolController[F, Auth],
      |      statusCodes: String => StatusCode = _ => StatusCode.UnprocessableEntity
      |  )(
      |      implicit codec0: Decoder[School],
      |      codec1: Encoder[School],
      |      codec2: JsonCodec[SchoolCreateError.DuplicateId.type],
      |      codec3: PlainCodec[Auth],
      |      codec4: PlainCodec[Long],
      |      codec5: JsonCodec[School],
      |      codec6: JsonCodec[SchoolReadError.NotFound.type],
      |      codec7: PlainCodec[School],
      |      cs: ContextShift[F]
      |  ): HttpRoutes[F] = {
      |    val endpoints = SchoolControllerTapirEndpoints.create[Auth](statusCodes)
      |    val create = endpoints.create.toRoutes({
      |      case (x, token) =>
      |        controller.create(x.school, token)
      |    })
      |    val read = endpoints.read.toRoutes(controller.read)
      |    val list = endpoints.list.toRoutes(controller.list)
      |    Router("/SchoolController" -> NonEmptyList.of(create, read, list).reduceK)
      |  }
      |}
      |""".stripMargin,
  )

  check(
    "akkaHttp-endpoints",
    Server.AkkaHttp,
    "src/main/scala/schools/endpoints",
    """
      |/src/main/scala/schools/SchoolController.scala
      |package schools
      |
      |case class School(id: Long, name: String)
      |
      |sealed trait SchoolCreateError
      |object SchoolCreateError {
      |  case object DuplicateId extends SchoolCreateError
      |}
      |
      |sealed trait SchoolReadError
      |object SchoolReadError {
      |  case object NotFound extends SchoolReadError
      |}
      |
      |trait SchoolController[Auth] {
      |  @command
      |  def create(school: School, token: Auth): Future[Either[SchoolCreateError, Unit]]
      |  @query
      |  def read(id: Long): Future[Either[SchoolReadError, School]]
      |  @query
      |  def list(): F[Either[Unit, List[School]]]
      |}
      |""".stripMargin,
    """
      |/src/main/scala/schools/endpoints/SchoolControllerHttpEndpoints.scala
      |//----------------------------------------------------------
      |//  This code was generated by tapiro.
      |//  Changes to this file may cause incorrect behavior
      |//  and will be lost if the code is regenerated.
      |//----------------------------------------------------------
      |
      |package endpoints
      |import schools._
      |import akka.http.scaladsl.server._
      |import akka.http.scaladsl.server.Directives._
      |import io.circe.{Decoder, Encoder}
      |import sttp.tapir.server.akkahttp._
      |import sttp.tapir.Codec.{JsonCodec, PlainCodec}
      |import sttp.model.StatusCode
      |
      |object SchoolControllerHttpEndpoints {
      |
      |  def routes[Auth](
      |      controller: SchoolController[Auth],
      |      statusCodes: String => StatusCode = _ => StatusCode.UnprocessableEntity
      |  )(
      |      implicit codec0: Decoder[School],
      |      codec1: Encoder[School],
      |      codec2: JsonCodec[SchoolCreateError.DuplicateId.type],
      |      codec3: PlainCodec[Auth],
      |      codec4: PlainCodec[Long],
      |      codec5: JsonCodec[School],
      |      codec6: JsonCodec[SchoolReadError.NotFound.type]
      |  ): Route = {
      |    val endpoints = SchoolControllerTapirEndpoints.create[Auth](statusCodes)
      |    val create = endpoints.create.toRoute({
      |      case (x, token) =>
      |        controller.create(x.school, token)
      |    })
      |    val read = endpoints.read.toRoute(controller.read)
      |    val list = endpoints.list.toRoute(_ => controller.list())
      |    pathPrefix("SchoolController") {
      |      List(read, list).foldLeft[Route](create)(_ ~ _)
      |    }
      |  }
      |}
      |""".stripMargin,
  )

  def check(
    name: String,
    server: Server,
    endpointDirectory: String,
    layout: String,
    expectedLayout: String,
    `package`: List[String] = List("endpoints"),
  )(implicit
    loc: munit.Location,
  ): Unit =
    test(name) {
      val projectRoot = FileLayout.fromString(layout)
      val tapiro = new Util()
      tapiro.createFiles(
        List(projectRoot.toString),
        List(projectRoot.toString),
        projectRoot.resolve(endpointDirectory).toString,
        `package`,
        server,
      )

      FileLayout.mapFromString(expectedLayout).map { case (path, content) =>
        val filePath = path.split("/").foldLeft(projectRoot)(_.resolve(_))
        assertNoDiff(new String(Files.readAllBytes(filePath.toNIO)), content)
      }

    }

}
